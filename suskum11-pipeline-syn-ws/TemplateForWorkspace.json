{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "suskum11-pipeline-syn-ws"
		},
		"AOI Batch Storage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AOI Batch Storage'"
		},
		"AOI Data Storage Account v2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AOI Data Storage Account v2'"
		},
		"AOI Geospatial v2 FS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AOI Geospatial v2 FS'"
		},
		"suskum11-pipeline-syn-ws-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'suskum11-pipeline-syn-ws-WorkspaceDefaultSqlServer'"
		},
		"AOI Batch_properties_typeProperties_batchUri": {
			"type": "string",
			"defaultValue": "https://stellarbatchdev.eastus.batch.azure.com"
		},
		"AOI Batch_properties_typeProperties_poolName": {
			"type": "string",
			"defaultValue": "data-cpu-pool"
		},
		"AOI Batch_properties_typeProperties_accountName": {
			"type": "string",
			"defaultValue": "stellarbatchdev"
		},
		"AOI Geospatial v2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://rawdatakikqvh.dfs.core.windows.net"
		},
		"AOI Pipeline Key Vault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://suskum11-pipeline-kv.vault.azure.net/"
		},
		"suskum11-pipeline-syn-ws-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synhnsnsndnb.dfs.core.windows.net/"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Custom Vision Model Transforms v2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "GetFilesToMosaic",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "rawtifs",
								"type": "DatasetReference",
								"parameters": {
									"containername": {
										"value": "@pipeline().parameters.Prefix",
										"type": "Expression"
									},
									"folderpath": "raw"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Crop",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "More than one GeoTiff",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "Crop",
								"type": "SparkJobDefinitionReference"
							},
							"file": "abfss://spark-jobs@synhnsnsndnb.dfs.core.windows.net/raster_crop/src/crop.py",
							"args": [
								"--storage_account_name",
								"@pipeline().parameters.StorageAccountName",
								"--storage_account_key",
								"@pipeline().parameters.StorageAccountKey",
								"--storage_container",
								"@pipeline().parameters.Prefix",
								"--src_folder_name",
								"@variables('CropSourceFolder')",
								"--config_file_name",
								"config-aoi.json"
							],
							"targetBigDataPool": {
								"referenceName": "poolnsndnb",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Medium",
							"conf": {
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 3
							},
							"driverSize": "Medium",
							"numExecutors": 2
						}
					},
					{
						"name": "Convert",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "Crop",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "Convert",
								"type": "SparkJobDefinitionReference"
							},
							"file": "abfss://spark-jobs@synhnsnsndnb.dfs.core.windows.net/raster_convert/src/convert.py",
							"args": [
								"--storage_account_name",
								"@pipeline().parameters.StorageAccountName",
								"--storage_account_key",
								"@pipeline().parameters.StorageAccountKey",
								"--storage_container",
								"@pipeline().parameters.Prefix",
								"--src_folder_name",
								"crop",
								"--config_file_name",
								"config-img-convert-png.json"
							],
							"targetBigDataPool": {
								"referenceName": "poolnsndnb",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Medium",
							"conf": {
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 3
							},
							"driverSize": "Medium",
							"numExecutors": 2
						}
					},
					{
						"name": "Tiling",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "Convert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "Tiling",
								"type": "SparkJobDefinitionReference"
							},
							"file": "abfss://spark-jobs@synhnsnsndnb.dfs.core.windows.net/raster_tiling/src/tiling.py",
							"args": [
								"--storage_account_name",
								"@pipeline().parameters.StorageAccountName",
								"--storage_container",
								"@pipeline().parameters.Prefix",
								"--src_folder_name",
								"convert",
								"--file_name",
								"output.png",
								"--tile_size",
								"512",
								"--storage_account_key",
								"@pipeline().parameters.StorageAccountKey"
							],
							"targetBigDataPool": {
								"referenceName": "poolnsndnb",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Medium",
							"conf": {
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 3
							},
							"driverSize": "Medium",
							"numExecutors": 2
						}
					},
					{
						"name": "More than one GeoTiff",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "For Each File to Mosaic",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(activity('GetFilesToMosaic').output.childItems),1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set Crop Source Folder to raw",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "CropSourceFolder",
										"value": "raw"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Mosaic",
									"type": "SparkJob",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"sparkJob": {
											"referenceName": "Mosaic",
											"type": "SparkJobDefinitionReference"
										},
										"file": "abfss://spark-jobs@synhnsnsndnb.dfs.core.windows.net/raster_mosaic/src/mosaic.py",
										"args": [
											"--storage_account_name",
											"@pipeline().parameters.StorageAccountName",
											"--storage_account_key",
											"@pipeline().parameters.StorageAccountKey",
											"--storage_container",
											"@pipeline().parameters.Prefix",
											"--src_folder_name",
											"raw"
										],
										"targetBigDataPool": {
											"referenceName": "poolnsndnb",
											"type": "BigDataPoolReference"
										},
										"executorSize": "Medium",
										"conf": {
											"spark.dynamicAllocation.minExecutors": 2,
											"spark.dynamicAllocation.maxExecutors": 3
										},
										"driverSize": "Medium",
										"numExecutors": 2
									}
								},
								{
									"name": "Set Crop Source Folder to mosaic",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Mosaic",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "CropSourceFolder",
										"value": "mosaic"
									}
								}
							]
						}
					},
					{
						"name": "For Each File to Mosaic",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetFilesToMosaic",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFilesToMosaic').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set Mosaic File Names",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Store Temp Mosaic File Names",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "MosaicFileNames",
										"value": {
											"value": "@concat(variables('TempMosaicFileNames'), if(equals(variables('TempMosaicFileNames'), ''),'',','), item().name)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Store Temp Mosaic File Names",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempMosaicFileNames",
										"value": {
											"value": "@variables('MosaicFileNames')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Prefix": {
						"type": "string"
					},
					"StorageAccountName": {
						"type": "string"
					},
					"StorageAccountKey": {
						"type": "string"
					}
				},
				"variables": {
					"FunctionCompleted": {
						"type": "String",
						"defaultValue": "None"
					},
					"FunctionError": {
						"type": "String"
					},
					"MosaicFileNames": {
						"type": "String"
					},
					"TempMosaicFileNames": {
						"type": "String"
					},
					"CropSourceFolder": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-06T06:06:58Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/rawtifs')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/Crop')]",
				"[concat(variables('workspaceId'), '/bigDataPools/poolnsndnb')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/Convert')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/Tiling')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/Mosaic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Custom Vision Object Detection v2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Wait for Custom Vision",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Custom Vision",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(and(not(equals(string(variables('FunctionCompleted')), 'running')), not(equals(string(variables('FunctionCompleted')), 'active'))), not(equals(string(variables('FunctionCompleted')), 'preparing')))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait for Custom Vision Check",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Set FunctionCompleted Custom Vision",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 30
									}
								},
								{
									"name": "Check Status Custom Vision",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat('https://',pipeline().parameters.BatchName,'.',pipeline().parameters.BatchLocation,'.batch.azure.com/jobs/',pipeline().parameters.JobName,'/tasks/aoi-cv-task-', pipeline().RunId, '?api-version=2022-01-01.15.0')",
											"type": "Expression"
										},
										"connectVia": {
											"referenceName": "AutoResolveIntegrationRuntime",
											"type": "IntegrationRuntimeReference"
										},
										"method": "GET",
										"headers": {},
										"authentication": {
											"type": "MSI",
											"resource": "https://batch.core.windows.net/"
										}
									}
								},
								{
									"name": "Set FunctionCompleted Custom Vision",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check Status Custom Vision",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FunctionCompleted",
										"value": {
											"value": "@activity('Check Status Custom Vision').output['state']",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set FunctionError",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Check Status Custom Vision",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FunctionError",
										"value": {
											"value": "@activity('Check Status Custom Vision').output['executionInfo']['failureInfo']",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "Custom Vision",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy Config file",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy Xml From Convert Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://',pipeline().parameters.BatchName,'.',pipeline().parameters.BatchLocation,'.batch.azure.com/jobs/',pipeline().parameters.JobName,'/tasks?api-version=2020-03-01.11.0')",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {
								"Content-type": "application/json; odata=minimalmetadata; charset=utf-8"
							},
							"body": {
								"value": "@json(concat('{\n  \"id\": \"aoi-cv-task-', pipeline().RunId, '\",\n  \"commandLine\": \"\",\n  \"containerSettings\": {\n    \"imageName\": \"', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['algImageName'], '\",\n    \"containerRunOptions\": \"--rm --workdir / -v /mnt/batch/tasks/fsmounts/S/', pipeline().parameters.Prefix, ':', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['mountedDirectory'], '\"\n  },\n  \"environmentSettings\": [\n      {\n          \"name\": \"APP_INPUT_DIR\",\n          \"value\": \"/mnt/batch/tasks/fsmounts/S/', pipeline().parameters.Prefix,'/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['submissionDirectory'],'\"\n      },\n      {\n          \"name\": \"APP_OUTPUT_DIR\",\n          \"value\": \"/mnt/batch/tasks/fsmounts/S/', pipeline().parameters.Prefix,'/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['resultsDirectory'],'\"\n      },\n      {\n          \"name\": \"APP_CONFIG_DIR\",\n          \"value\": \"/mnt/batch/tasks/fsmounts/S/', pipeline().parameters.Prefix,'/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['contextFileName'],'\"\n      }\n  ]\n}'))",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://batch.core.windows.net/"
							}
						}
					},
					{
						"name": "Pool Geolocation",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "Copy Xml",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy Json",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "Pool Geolocation",
								"type": "SparkJobDefinitionReference"
							},
							"file": "abfss://spark-jobs@synhnsnsndnb.dfs.core.windows.net/pool_geolocation/src/main.py",
							"args": [
								"--storage_account_name",
								"@pipeline().parameters.StorageAccountName",
								"--storage_container",
								"@pipeline().parameters.Prefix",
								"--src_folder_name",
								"detections",
								"--key_vault_name",
								"suskum11-pipeline-kv",
								"--storage_account_key_secret_name",
								"GeospatialStorageAccountKey",
								"--linked_service_name",
								"AOI Pipeline Key Vault",
								"--config_file_name",
								"config-pool-geolocation.json"
							],
							"targetBigDataPool": {
								"referenceName": "poolnsndnb",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Medium",
							"conf": {
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 3
							},
							"driverSize": "Medium",
							"numExecutors": 2
						}
					},
					{
						"name": "Copy Tiles",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "Read Spec Document",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "Copy noop",
								"type": "SparkJobDefinitionReference"
							},
							"file": "abfss://spark-jobs@synhnsnsndnb.dfs.core.windows.net/copy_noop/src/main.py",
							"args": [
								"--storage_account_name",
								"@pipeline().parameters.StorageAccountName",
								"--src_container",
								"@pipeline().parameters.Prefix",
								"--src_folder",
								"tiles",
								"--key_vault_name",
								"suskum11-pipeline-kv",
								"--storage_account_key_secret_name",
								"GeospatialStorageAccountKey",
								"--linked_service_name",
								"AOI Pipeline Key Vault",
								"--dst_fileshare",
								"volume-a",
								"--dst_folder",
								"@concat(pipeline().parameters.Prefix,'/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['submissionDirectory'])",
								"--folders_to_create",
								"@concat(pipeline().parameters.Prefix, '/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['submissionDirectory'])",
								"--folders_to_create",
								"@concat(pipeline().parameters.Prefix, '/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['resultsDirectory'])",
								"--folders_to_create",
								"@concat(pipeline().parameters.Prefix,'/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['logsDirectory'])"
							],
							"targetBigDataPool": {
								"referenceName": "poolnsndnb",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Medium",
							"conf": {
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 3
							},
							"driverSize": "Medium",
							"numExecutors": 2
						}
					},
					{
						"name": "Copy Config file",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "Copy Tiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "Copy noop",
								"type": "SparkJobDefinitionReference"
							},
							"file": "abfss://spark-jobs@synhnsnsndnb.dfs.core.windows.net/copy_noop/src/main.py",
							"args": [
								"--storage_account_name",
								"@pipeline().parameters.StorageAccountName",
								"--src_container",
								"@pipeline().parameters.Prefix",
								"--src_folder",
								"@concat('config/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['contextFileName'])",
								"--key_vault_name",
								"suskum11-pipeline-kv",
								"--storage_account_key_secret_name",
								"GeospatialStorageAccountKey",
								"--linked_service_name",
								"AOI Pipeline Key Vault",
								"--dst_fileshare",
								"volume-a",
								"--dst_folder",
								"@concat(pipeline().parameters.Prefix, '/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['contextFileName'])"
							],
							"targetBigDataPool": {
								"referenceName": "poolnsndnb",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Medium",
							"conf": {
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 3
							},
							"driverSize": "Medium",
							"numExecutors": 2
						}
					},
					{
						"name": "Copy Json",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait for Custom Vision",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat(pipeline().parameters.Prefix, '/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['resultsDirectory'], '/json')",
										"type": "Expression"
									},
									"wildcardFileName": "*.json",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "gls",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "gld",
								"type": "DatasetReference",
								"parameters": {
									"DestinationFolderPath": "detections",
									"DestinationContainerName": {
										"value": "@pipeline().parameters.Prefix",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy Xml",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait for Custom Vision",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat(pipeline().parameters.Prefix, '/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['resultsDirectory'], '/other')",
										"type": "Expression"
									},
									"wildcardFileName": "*.xml",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "gls",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "gld",
								"type": "DatasetReference",
								"parameters": {
									"DestinationFolderPath": "detections",
									"DestinationContainerName": {
										"value": "@pipeline().parameters.Prefix",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Read Spec Document",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ReadSpecDocumentFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {
										"filename": "custom_vision_object_detection.json",
										"folderpath": "config",
										"containername": {
											"value": "@pipeline().parameters.Prefix",
											"type": "Expression"
										}
									},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "Copy Xml From Convert Transform",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "Copy Tiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "Copy noop",
								"type": "SparkJobDefinitionReference"
							},
							"file": "abfss://spark-jobs@synhnsnsndnb.dfs.core.windows.net/copy_noop/src/main.py",
							"args": [
								"--storage_account_name",
								"@pipeline().parameters.StorageAccountName",
								"--src_container",
								"@pipeline().parameters.Prefix",
								"--src_folder",
								"convert/output.png.aux.xml",
								"--key_vault_name",
								"suskum11-pipeline-kv",
								"--storage_account_key_secret_name",
								"GeospatialStorageAccountKey",
								"--linked_service_name",
								"AOI Pipeline Key Vault",
								"--dst_fileshare",
								"volume-a",
								"--dst_folder",
								"@concat(pipeline().parameters.Prefix, '/', activity('Read Spec Document').output['runStatus'].output.sink.value[0]['submissionDirectory'], '/output.png.aux.xml')"
							],
							"targetBigDataPool": {
								"referenceName": "poolnsndnb",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Medium",
							"conf": {
								"spark.dynamicAllocation.minExecutors": 2,
								"spark.dynamicAllocation.maxExecutors": 3
							},
							"driverSize": "Medium",
							"numExecutors": 2
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Prefix": {
						"type": "string"
					},
					"BatchName": {
						"type": "string"
					},
					"JobName": {
						"type": "string"
					},
					"BatchLocation": {
						"type": "string"
					},
					"StorageAccountName": {
						"type": "string"
					},
					"StorageAccountKey": {
						"type": "string"
					}
				},
				"variables": {
					"FunctionCompleted": {
						"type": "String"
					},
					"FunctionError": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-06T05:52:44Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/Pool Geolocation')]",
				"[concat(variables('workspaceId'), '/bigDataPools/poolnsndnb')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/Copy noop')]",
				"[concat(variables('workspaceId'), '/datasets/gls')]",
				"[concat(variables('workspaceId'), '/datasets/gld')]",
				"[concat(variables('workspaceId'), '/dataflows/ReadSpecDocumentFlow')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/E2E Custom Vision Model Flow')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Transforms",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Custom Vision Model Transforms v2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Prefix": {
									"value": "@pipeline().parameters.Prefix",
									"type": "Expression"
								},
								"StorageAccountName": {
									"value": "@pipeline().parameters.StorageAccountName",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@pipeline().parameters.StorageAccountKey",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Custom Vision Object Detection",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transforms",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Custom Vision Object Detection v2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Prefix": {
									"value": "@pipeline().parameters.Prefix",
									"type": "Expression"
								},
								"BatchName": {
									"value": "@pipeline().parameters.BatchAccountName",
									"type": "Expression"
								},
								"JobName": {
									"value": "@pipeline().parameters.BatchJobName",
									"type": "Expression"
								},
								"BatchLocation": {
									"value": "@pipeline().parameters.BatchLocation",
									"type": "Expression"
								},
								"StorageAccountName": {
									"value": "@pipeline().parameters.StorageAccountName",
									"type": "Expression"
								},
								"StorageAccountKey": {
									"value": "@pipeline().parameters.StorageAccountKey",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Prefix": {
						"type": "string"
					},
					"StorageAccountName": {
						"type": "string"
					},
					"StorageAccountKey": {
						"type": "string"
					},
					"BatchAccountName": {
						"type": "string"
					},
					"BatchJobName": {
						"type": "string"
					},
					"BatchLocation": {
						"type": "string"
					}
				},
				"variables": {
					"Storage_Account_Conn_String": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-03-06T05:42:39Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Custom Vision Model Transforms v2')]",
				"[concat(variables('workspaceId'), '/pipelines/Custom Vision Object Detection v2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/gld')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AOI Geospatial v2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DestinationFolderPath": {
						"type": "string"
					},
					"DestinationContainerName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().DestinationFolderPath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().DestinationContainerName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AOI Geospatial v2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/gls')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AOI Geospatial v2 FS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AOI Geospatial v2 FS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/rawtifs')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AOI Data Storage Account v2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containername": {
						"type": "string"
					},
					"folderpath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().folderpath",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().containername",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AOI Data Storage Account v2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/spec_doc_specification')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AOI Data Storage Account v2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					},
					"folderpath": {
						"type": "string"
					},
					"containername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderpath",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().containername",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AOI Data Storage Account v2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AOI Batch Storage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AOI Batch Storage_connectionString')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AOI Pipeline Key Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "PackageStorageAccountKey"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/AOI Pipeline Key Vault')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AOI Batch')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBatch",
				"typeProperties": {
					"batchUri": "[parameters('AOI Batch_properties_typeProperties_batchUri')]",
					"poolName": "[parameters('AOI Batch_properties_typeProperties_poolName')]",
					"accountName": "[parameters('AOI Batch_properties_typeProperties_accountName')]",
					"linkedServiceName": {
						"referenceName": "AOI Batch Storage",
						"type": "LinkedServiceReference"
					},
					"accessKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AOI Pipeline Key Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "GeospatialBatchAccountKey"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/AOI Batch Storage')]",
				"[concat(variables('workspaceId'), '/linkedServices/AOI Pipeline Key Vault')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AOI Data Storage Account v2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AOI Data Storage Account v2_connectionString')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AOI Pipeline Key Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "GeospatialStorageAccountKey"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/AOI Pipeline Key Vault')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AOI Geospatial v2 FS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('AOI Geospatial v2 FS_connectionString')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AOI Pipeline Key Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "GeospatialStorageAccountKey"
					},
					"fileShare": "volume-a"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/AOI Pipeline Key Vault')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AOI Geospatial v2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AOI Geospatial v2_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AOI Pipeline Key Vault')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AOI Pipeline Key Vault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/suskum11-pipeline-syn-ws-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('suskum11-pipeline-syn-ws-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/suskum11-pipeline-syn-ws-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('suskum11-pipeline-syn-ws-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReadSpecDocumentFlow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "spec_doc_specification",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"name": "sink"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source",
						"source sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: true,",
						"     saveOrder: 1) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/spec_doc_specification')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Convert')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "poolnsndnb",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "python",
				"jobProperties": {
					"name": "Convert",
					"file": "abfss://spark-jobs@synhnsnsndnb.dfs.core.windows.net/raster_convert/src/convert.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "72aef2fd-aaae-40ed-8a09-7b2e87353ace"
					},
					"args": [],
					"jars": [],
					"files": [],
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy noop')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "poolnsndnb",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "python",
				"jobProperties": {
					"name": "Copy noop",
					"file": "abfss://spark-jobs@synhnsnsndnb.dfs.core.windows.net/copy_noop/src/main.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "01767b3a-cede-4abf-8b79-52cb6d0ff80d"
					},
					"args": [],
					"jars": [],
					"files": [],
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Crop')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "poolnsndnb",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "python",
				"jobProperties": {
					"name": "Crop",
					"file": "abfss://spark-jobs@synhnsnsndnb.dfs.core.windows.net/raster_crop/src/crop.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f4cbbafe-9d98-476f-9bd4-e5bfc7bad06c"
					},
					"args": [],
					"jars": [],
					"files": [
						"abfss://spark-jobs@synhnsnsndnb.dfs.core.windows.net/raster_crop/src/utils.py"
					],
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Mosaic')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "poolnsndnb",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "python",
				"jobProperties": {
					"name": "Mosaic",
					"file": "abfss://spark-jobs@synhnsnsndnb.dfs.core.windows.net/raster_mosaic/src/mosaic.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "3",
						"spark.dynamicAllocation.maxExecutors": "3",
						"spark.autotune.trackingId": "811de002-982f-4b4b-9732-147d3565c502"
					},
					"args": [],
					"jars": [],
					"files": [],
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 3
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pool Geolocation')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "poolnsndnb",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "python",
				"jobProperties": {
					"name": "Pool Geolocation",
					"file": "abfss://spark-jobs@synhnsnsndnb.dfs.core.windows.net/pool_geolocation/src/main.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "0d715b42-8d99-4e74-8a24-860c7275f387"
					},
					"args": [],
					"jars": [],
					"files": [
						"abfss://spark-jobs@synhnsnsndnb.dfs.core.windows.net/pool_geolocation/src/utils.py"
					],
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Tiling')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "poolnsndnb",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "python",
				"jobProperties": {
					"name": "Tiling",
					"file": "abfss://spark-jobs@synhnsnsndnb.dfs.core.windows.net/raster_tiling/src/tiling.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "65be76e5-ef21-47ec-be7a-38039b2abfd4"
					},
					"args": [],
					"jars": [],
					"files": [],
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Warp')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "poolnsndnb",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "3.1",
				"language": "python",
				"jobProperties": {
					"name": "Warp",
					"file": "abfss://spark-jobs@synhnsnsndnb.dfs.core.windows.net/raster_warp/src/warp.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "3",
						"spark.dynamicAllocation.maxExecutors": "3",
						"spark.autotune.trackingId": "335dd1ad-fc75-4734-ad92-03a79e9ad399"
					},
					"args": [],
					"jars": [],
					"files": [],
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 3
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/poolnsndnb')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 5,
					"minNodeCount": 1
				},
				"nodeCount": 0,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"libraryRequirements": {
					"content": "name: aoi-env\nchannels:\n  - conda-forge\n  - defaults\ndependencies:\n  - gdal=3.3.0\n  - pip>=20.1.1\n  - azure-storage-file-datalake\n  - libgdal\n  - shapely\n  - pyproj\n  - pip:\n    - rasterio\n    - geopandas\n",
					"filename": "/Users/suskuma/synapse-airbus/repos/Azure-Orbital-Analytics-Samples/deploy/environment.yml",
					"time": "2022-05-05T20:31:49.7781578Z"
				},
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		}
	]
}